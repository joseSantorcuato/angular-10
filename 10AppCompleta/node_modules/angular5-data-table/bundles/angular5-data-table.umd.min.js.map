{
  "version": 3,
  "file": "angular5-data-table.umd.min.js",
  "sources": [
    "ng://angular5-data-table/out/utils/hide.ts",
    "ng://angular5-data-table/out/utils/min.ts",
    "ng://angular5-data-table/out/utils/px.ts",
    "ng://angular5-data-table/out/tools/data-table-resource.ts",
    "ng://angular5-data-table/out/directives/column/column.directive.ts",
    "ng://angular5-data-table/out/components/row/row.component.ts",
    "ng://angular5-data-table/out/types/default-translations.type.ts",
    "ng://angular5-data-table/out/components/table/table.component.ts",
    "ng://angular5-data-table/out/utils/drag.ts",
    "ng://angular5-data-table/out/components/header/header.component.ts",
    "ng://angular5-data-table/out/components/pagination/pagination.component.ts",
    "ng://angular5-data-table/out/datatable.module.ts"
  ],
  "sourcesContent": [
    "import {\r\n  Directive,\r\n  ElementRef,\r\n  Input,\r\n  Renderer2\r\n} from '@angular/core';\r\n\r\nfunction isBlank(obj: any): boolean {\r\n  return obj === undefined || obj === null;\r\n}\r\n\r\n@Directive({\r\n  selector: '[hide]'\r\n})\r\nexport class HideDirective {\r\n\r\n  private _prevCondition = false;\r\n  private _displayStyle: string;\r\n\r\n  constructor(private _elementRef: ElementRef, private renderer: Renderer2) {\r\n  }\r\n\r\n  @Input()\r\n  set hide(newCondition: boolean) {\r\n    this.initDisplayStyle();\r\n\r\n    if (newCondition && (isBlank(this._prevCondition) || !this._prevCondition)) {\r\n      this._prevCondition = true;\r\n      this.renderer.setStyle(this._elementRef.nativeElement, 'display', 'none');\r\n    } else if (!newCondition && (isBlank(this._prevCondition) || this._prevCondition)) {\r\n      this._prevCondition = false;\r\n      this.renderer.setStyle(this._elementRef.nativeElement, 'display', this._displayStyle);\r\n    }\r\n  }\r\n\r\n  private initDisplayStyle() {\r\n    if (this._displayStyle === undefined) {\r\n      const displayStyle = this._elementRef.nativeElement.style.display;\r\n      if (displayStyle !== 'none') {\r\n        this._displayStyle = displayStyle;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
    "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n\r\n@Pipe({\r\n  name: 'min'\r\n})\r\nexport class MinPipe implements PipeTransform {\r\n  transform(value: number[], args: string[]): any {\r\n    return Math.min.apply(null, value);\r\n  }\r\n}\r\n",
    "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'px'\r\n})\r\nexport class PixelConverter implements PipeTransform {\r\n  transform(value: string | number, args: string[]): any {\r\n    if (value === undefined) {\r\n      return;\r\n    }\r\n    if (typeof value === 'string') {\r\n      return value;\r\n    }\r\n    if (typeof value === 'number') {\r\n      return value + 'px';\r\n    }\r\n  }\r\n}\r\n",
    "import {DataTableParams} from '../types/data-table-params.type';\r\n\r\n\r\nexport class DataTableResource<T> {\r\n\r\n  constructor(private items: T[]) {\r\n  }\r\n\r\n  query(params: DataTableParams, filter?: (item: T, index: number, items: T[]) => boolean): Promise<T[]> {\r\n\r\n    let result: T[] = [];\r\n    if (filter) {\r\n      result = this.items.filter(filter);\r\n    } else {\r\n      result = this.items.slice(); // shallow copy to use for sorting instead of changing the original\r\n    }\r\n\r\n    if (params.sortBy) {\r\n      result.sort((a: DataTableParams, b: DataTableParams) => {\r\n        if (typeof a[params.sortBy] === 'string') {\r\n          return a[params.sortBy].localeCompare(b[params.sortBy]);\r\n        } else {\r\n          return a[params.sortBy] - b[params.sortBy];\r\n        }\r\n      });\r\n      if (params.sortAsc === false) {\r\n        result.reverse();\r\n      }\r\n    }\r\n    if (params.offset !== undefined) {\r\n      if (params.limit === undefined) {\r\n        result = result.slice(params.offset, result.length);\r\n      } else {\r\n        result = result.slice(params.offset, params.offset + params.limit);\r\n      }\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => resolve(result));\r\n    });\r\n  }\r\n\r\n  count(): Promise<number> {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => resolve(this.items.length));\r\n    });\r\n\r\n  }\r\n}\r\n",
    "import {ContentChild, Directive, ElementRef, Input, OnInit} from '@angular/core';\r\nimport {DataTableRowComponent} from '../../components/row/row.component';\r\nimport {CellCallback} from '../../types/cell-callback.type';\r\n\r\n\r\n@Directive({\r\n  selector: 'data-table-column'\r\n})\r\nexport class DataTableColumnDirective implements OnInit {\r\n\r\n  private styleClassObject = {}; // for [ngClass]\r\n\r\n  // init:\r\n  @Input() header: string;\r\n  @Input() sortable = false;\r\n  @Input() resizable = false;\r\n  @Input() property: string;\r\n  @Input() styleClass: string;\r\n  @Input() cellColors: CellCallback;\r\n\r\n  // init and state:\r\n  @Input() width: number | string;\r\n  @Input() visible = true;\r\n\r\n  @ContentChild('dataTableCell') cellTemplate: ElementRef;\r\n  @ContentChild('dataTableHeader') headerTemplate: ElementRef;\r\n\r\n  getCellColor(row: DataTableRowComponent, index: number) {\r\n    if (this.cellColors !== undefined) {\r\n      return (<CellCallback>this.cellColors)(row.item, row, this, index);\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._initCellClass();\r\n  }\r\n\r\n  private _initCellClass() {\r\n    if (!this.styleClass && this.property) {\r\n      if (/^[a-zA-Z0-9_]+$/.test(this.property)) {\r\n        this.styleClass = 'column-' + this.property;\r\n      } else {\r\n        this.styleClass = 'column-' + this.property.replace(/[^a-zA-Z0-9_]/g, '');\r\n      }\r\n    }\r\n\r\n    if (this.styleClass != null) {\r\n      this.styleClassObject = {\r\n        [this.styleClass]: true\r\n      };\r\n    }\r\n  }\r\n}\r\n",
    "import {\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  Renderer2\r\n} from '@angular/core';\r\nimport { DataTableComponent } from '../table/table.component';\r\n\r\n@Component({\r\n  selector: '[dataTableRow]',\r\n  template: `<tr class=\"data-table-row\"\r\n    [title]=\"getTooltip()\"\r\n    [style.background-color]=\"dataTable.getRowColor(item, index, _this)\"\r\n    [class.row-odd]=\"index % 2 === 0\"\r\n    [class.row-even]=\"index % 2 === 1\"\r\n    [class.selected]=\"selected\"\r\n    [class.clickable]=\"dataTable.selectOnRowClick\">\r\n  <td [hide]=\"!dataTable.expandColumnVisible\">\r\n    <button (click)=\"expanded = !expanded; $event.stopPropagation()\" class=\"row-expand-button\"\r\n         [attr.aria-expanded]=\"expanded\"\r\n         [title]=\"dataTable.labels.expandRow.replace('{cell_content}', ''+item[dataTable.primaryColumn])\"\r\n         [attr.aria-label]=\"dataTable.labels.expandRow.replace('{cell_content}', ''+item[dataTable.primaryColumn])\">\r\n      <i [ngClass]=\"{'fa-caret-right': !expanded, 'fa-caret-down': expanded}\" class=\"fa fa-lg\" aria-hidden=\"true\"></i>\r\n    </button>\r\n  </td>\r\n  <td [hide]=\"!dataTable.indexColumnVisible\" class=\"index-column\" [textContent]=\"displayIndex\"></td>\r\n  <td [hide]=\"!dataTable.selectColumnVisible\" class=\"select-column\">\r\n    <input type=\"checkbox\" [(ngModel)]=\"selected\"\r\n           [title]=\"dataTable.labels.selectRow.replace('{cell_content}', ''+item[dataTable.primaryColumn])\"\r\n           [attr.aria-label]=\"dataTable.labels.selectRow.replace('{cell_content}', ''+item[dataTable.primaryColumn])\"/>\r\n  </td>\r\n  <ng-template ngFor [ngForOf]=\"dataTable.columns\" let-column>\r\n    <th *ngIf=\"dataTable.primaryColumn === column.property\" scope=\"row\" [hide]=\"!column.visible\" [ngClass]=\"column.styleClassObject\"\r\n        class=\"data-column\"\r\n        [style.background-color]=\"column.getCellColor(_this, index)\">\r\n      <div *ngIf=\"!column.cellTemplate\" [textContent]=\"item[column.property]\"></div>\r\n      <div *ngIf=\"column.cellTemplate\" [ngTemplateOutlet]=\"column.cellTemplate\"\r\n           [ngTemplateOutletContext]=\"{column: column, row: _this, item: item}\"></div>\r\n    </th>\r\n    <td *ngIf=\"dataTable.primaryColumn !== column.property\" [hide]=\"!column.visible\" [ngClass]=\"column.styleClassObject\"\r\n        class=\"data-column\"\r\n        [style.background-color]=\"column.getCellColor(_this, index)\">\r\n      <div *ngIf=\"!column.cellTemplate\" [textContent]=\"item[column.property]\"></div>\r\n      <div *ngIf=\"column.cellTemplate\" [ngTemplateOutlet]=\"column.cellTemplate\"\r\n           [ngTemplateOutletContext]=\"{column: column, row: _this, item: item}\"></div>\r\n    </td>\r\n  </ng-template>\r\n</tr>\r\n<tr *ngIf=\"dataTable.expandableRows\" [hide]=\"!expanded\" class=\"row-expansion\">\r\n  <td [attr.colspan]=\"dataTable.columnCount\">\r\n    <div [ngTemplateOutlet]=\"dataTable.expandTemplate\" [ngTemplateOutletContext]=\"{row: _this, item: item}\"></div>\r\n  </td>\r\n</tr>\r\n`,\r\n  styles: [`.select-column{text-align:center}.row-expand-button{-webkit-box-sizing:content-box;box-sizing:content-box;background:0 0;border:0;color:inherit;cursor:pointer;font:inherit;line-height:normal;overflow:visible;padding:.15rem .75rem;-webkit-appearance:button;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none}.clickable{cursor:pointer}th{font-weight:initial}`]\r\n})\r\nexport class DataTableRowComponent implements OnInit, OnDestroy {\r\n\r\n  public _this = this;\r\n\r\n  @Input() item: any;\r\n  @Input() index: number;\r\n\r\n  expanded: boolean;\r\n\r\n  private _listeners = [];\r\n\r\n  // row selection:\r\n  private _selected: boolean;\r\n\r\n  @Output() selectedChange = new EventEmitter();\r\n\r\n  get selected() {\r\n    return this._selected;\r\n  }\r\n\r\n  set selected(selected) {\r\n    this._selected = selected;\r\n    this.selectedChange.emit(selected);\r\n  }\r\n\r\n  // other:\r\n  get displayIndex() {\r\n    if (this.dataTable.pagination) {\r\n      return this.dataTable.displayParams.offset + this.index + 1;\r\n    } else {\r\n      return this.index + 1;\r\n    }\r\n  }\r\n\r\n  getTooltip() {\r\n    if (this.dataTable.rowTooltip) {\r\n      return this.dataTable.rowTooltip(this.item, this, this.index);\r\n    }\r\n    return '';\r\n  }\r\n\r\n  constructor(@Inject(forwardRef(() => DataTableComponent)) public dataTable: DataTableComponent,\r\n              private renderer: Renderer2, private elementRef: ElementRef) {}\r\n\r\n  ngOnInit() {\r\n    if (this.dataTable.rowClick.observers.length > 0) {\r\n      this._listeners.push(\r\n        this.renderer.listen(this.elementRef.nativeElement, 'click',\r\n          (event) => this.dataTable.rowClicked(this, event))\r\n      );\r\n    }\r\n    if (this.dataTable.rowDoubleClick.observers.length > 0) {\r\n      this._listeners.push(\r\n        this.renderer.listen(this.elementRef.nativeElement, 'dblclick',\r\n          (event) => this.dataTable.rowDoubleClicked(this, event))\r\n      );\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.selected = false;\r\n    this._listeners.forEach(fn => fn());\r\n  }\r\n}\r\n",
    "import { DataTableTranslations } from './data-table-translations.type';\r\n\r\nexport const defaultTranslations: DataTableTranslations = {\r\n  headerReload: 'reload {title} table',\r\n  headerColumnSelector: 'column selector - adds or removes columns from {title} table',\r\n  headerColumnSelectorAdded: '{column_name} added to {title} table',\r\n  headerColumnSelectorRemoved: '{column_name} removed from {title} table',\r\n  indexColumn: 'index',\r\n  selectColumn: 'select',\r\n  selectRow: 'select {cell_content}',\r\n  selectAllRows: 'select all rows',\r\n  expandColumn: 'expand',\r\n  expandRow: 'expand {cell_content}',\r\n  sortedAscending: '{title} table sorted by {header} ascending',\r\n  sortedDescending: '{title} table sorted by {header} descending',\r\n  sortAscending: 'activate to sort ascending',\r\n  sortDescending: 'activate to sort descending',\r\n  paginationLimit: 'Limit',\r\n  paginationText: 'Results: {from} to {to} of {total}',\r\n  paginationTotalPages: 'of',\r\n  firstPage: 'first page',\r\n  prevPage: 'previous page',\r\n  pageNumberLabel: 'Page',\r\n  pageNumber: 'page number',\r\n  pageNumberNofM: '({N} of {M})',\r\n  nextPage: 'next page',\r\n  lastPage: 'last page',\r\n  loadingText: '{title} table is loading',\r\n  loadedText: '{title} table loaded'\r\n};\r\n",
    "import {\r\n  AfterContentInit,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  QueryList,\r\n  TemplateRef,\r\n  ViewChildren\r\n} from '@angular/core';\r\nimport { DataTableColumnDirective } from '../../directives/column/column.directive';\r\nimport { DataTableRowComponent } from '../row/row.component';\r\nimport { DataTableParams } from '../../types/data-table-params.type';\r\nimport { RowCallback } from '../../types/row-callback.type';\r\nimport { DataTableTranslations } from '../../types/data-table-translations.type';\r\nimport { defaultTranslations } from '../../types/default-translations.type';\r\nimport { drag } from '../../utils/drag';\r\n\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport 'rxjs/add/operator/debounceTime';\r\nimport 'rxjs/add/operator/do';\r\n\r\nlet nextId = 0;\r\n\r\n@Component({\r\n  selector: 'data-table',\r\n  template: `<div class=\"data-table-wrapper\">\r\n  <span class=\"sr-only\" role=\"status\" aria-live=\"polite\" aria-atomic=\"false\" aria-relevant=\"text\">\r\n    <span [textContent]=\"reloadNotification\"></span>\r\n    <span [textContent]=\"paginationNotification\"></span>\r\n    <span [textContent]=\"sortNotification\"></span>\r\n    <span [textContent]=\"columnSelectorNotification\"></span>\r\n  </span>\r\n\r\n  <data-table-header *ngIf=\"header\"></data-table-header>\r\n\r\n  <div class=\"data-table-box\">\r\n    <table class=\"table data-table\" [id]=\"id\">\r\n      <caption class=\"sr-only\" [textContent]=\"title\"></caption>\r\n      <thead>\r\n      <tr>\r\n        <td [hide]=\"!expandColumnVisible\" class=\"expand-column-header\">\r\n        </td>\r\n        <th scope=\"col\" [hide]=\"!indexColumnVisible\" class=\"index-column-header\">\r\n          <span [textContent]=\"indexColumnHeader\"></span>\r\n        </th>\r\n        <td [hide]=\"!selectColumnVisible\" class=\"select-column-header\">\r\n          <input [hide]=\"!multiSelect\"\r\n                 type=\"checkbox\"\r\n                 [(ngModel)]=\"selectAllCheckbox\"\r\n                 [disabled]=\"itemCount === 0\"\r\n                 [title]=\"labels.selectAllRows\"\r\n                 [attr.aria-label]=\"labels.selectAllRows\"/>\r\n        </td>\r\n        <th *ngFor=\"let column of columns, index as i\" #th\r\n            [hide]=\"!column.visible\"\r\n            [class.sortable]=\"column.sortable\"\r\n            [class.resizable]=\"column.resizable\"\r\n            scope=\"col\"\r\n            [attr.aria-sort]=\"column.sortable ? (column.property === sortBy ? (sortAsc ? 'ascending' : 'descending') : 'none') : null\"\r\n            [ngClass]=\"column.styleClassObject\" class=\"column-header\" [style.width]=\"column.width | px\" >\r\n          <button *ngIf=\"column.sortable\" (click)=\"headerClicked(column, $event)\"\r\n                  [attr.aria-controls]=\"column.sortable ? id : null\"\r\n                  [disabled]=\"itemCount === 0\"\r\n                  [attr.aria-labelledby]=\"'col-'+id+'-'+i\"\r\n                  [title]=\"!sortAsc ? labels.sortAscending : labels.sortDescending\">\r\n            <span *ngIf=\"!column.headerTemplate\" [id]=\"'col-'+id+'-'+i\"\r\n                  [textContent]=\"column.header\"></span>\r\n            <span *ngIf=\"column.headerTemplate\" [ngTemplateOutlet]=\"column.headerTemplate\"\r\n                  [ngTemplateOutletContext]=\"{column: column}\"></span>\r\n            <span class=\"column-sort-icon\" *ngIf=\"column.sortable\">\r\n              <i [hide]=\"column.property === sortBy\" class=\"fa fa-sort column-sortable-icon\"\r\n                aria-hidden=\"true\"></i>\r\n              <i [hide]=\"column.property !== sortBy\" class=\"fa\"\r\n                [ngClass]=\"{'fa-sort-asc': sortAsc, 'fa-sort-desc': !sortAsc}\" aria-hidden=\"true\"></i>\r\n            </span>\r\n            <span *ngIf=\"column.resizable\" class=\"column-resize-handle\"\r\n                  (mousedown)=\"resizeColumnStart($event, column, th)\"></span>\r\n          </button>\r\n          <span *ngIf=\"!column.sortable\">\r\n            <span *ngIf=\"!column.headerTemplate\"\r\n                  [textContent]=\"column.header\"></span>\r\n            <span *ngIf=\"column.headerTemplate\" [ngTemplateOutlet]=\"column.headerTemplate\"\r\n                  [ngTemplateOutletContext]=\"{column: column}\"></span>\r\n            <span class=\"column-sort-icon\" *ngIf=\"column.sortable\">\r\n               <i [hide]=\"column.property === sortBy\" class=\"fa fa-sort column-sortable-icon\"\r\n                  aria-hidden=\"true\"></i>\r\n               <i [hide]=\"column.property !== sortBy\" class=\"fa\"\r\n                  [ngClass]=\"{'fa-sort-asc': sortAsc, 'fa-sort-desc': !sortAsc}\" aria-hidden=\"true\"></i>\r\n            </span>\r\n            <span *ngIf=\"column.resizable\" class=\"column-resize-handle\"\r\n                  (mousedown)=\"resizeColumnStart($event, column, th)\"></span>\r\n          </span>\r\n        </th>\r\n      </tr>\r\n      </thead>\r\n      <tbody *ngFor=\"let item of items; let index=index\" class=\"data-table-row-wrapper\"\r\n             dataTableRow #row [item]=\"item\" [index]=\"index\" (selectedChange)=\"onRowSelectChanged(row)\">\r\n      </tbody>\r\n      <tbody *ngIf=\"itemCount === 0 && noDataMessage\">\r\n        <tr>\r\n          <td [attr.colspan]=\"columnCount\">{{ noDataMessage }}</td>\r\n        </tr>\r\n      </tbody>\r\n      <tbody class=\"substitute-rows\" *ngIf=\"pagination && substituteRows\">\r\n      <tr *ngFor=\"let item of substituteItems, let index = index\"\r\n          [class.row-odd]=\"(index + items.length) % 2 === 0\"\r\n          [class.row-even]=\"(index + items.length) % 2 === 1\" role=\"presentation\">\r\n        <td [hide]=\"!expandColumnVisible\"></td>\r\n        <td [hide]=\"!indexColumnVisible\">&nbsp;</td>\r\n        <td [hide]=\"!selectColumnVisible\"></td>\r\n        <td *ngFor=\"let column of columns\" [hide]=\"!column.visible\">\r\n      </tr>\r\n      </tbody>\r\n    </table>\r\n    <div class=\"busy\" *ngIf=\"showReloading && reloading\">\r\n      <i><i class=\"fa fa-spin fa-cog fa-2x\"></i></i>\r\n    </div>\r\n  </div>\r\n\r\n  <data-table-pagination *ngIf=\"pagination\" [limits]=\"pageLimits\"></data-table-pagination>\r\n</div>\r\n`,\r\n  styles: [`:host /deep/ .data-table.table>tbody+tbody{border-top:none}:host /deep/ .data-table.table td{vertical-align:middle}:host /deep/ .data-table>tbody>tr>td,:host /deep/ .data-table>thead>tr>th{overflow:hidden}:host /deep/ .data-table>thead>tr>td{border-bottom:2px solid #dee2e6}:host /deep/ .row-odd{background-color:#f6f6f6}.data-table .substitute-rows>tr:hover,:host /deep/ .data-table .data-table-row:hover{background-color:#ececec}.data-table{-webkit-box-shadow:0 0 15px #ececec;box-shadow:0 0 15px #ececec;table-layout:fixed}.column-header{position:relative}.expand-column-header{width:50px}.select-column-header{width:50px;text-align:center}.index-column-header{width:40px}.column-header.sortable button{-webkit-box-sizing:content-box;box-sizing:content-box;background:0 0;border:0;color:inherit;cursor:pointer;font:inherit;line-height:normal;overflow:visible;padding:0;-webkit-appearance:button;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;text-align:left}.column-header .column-sort-icon{margin-left:8px}.column-header.resizable .column-sort-icon{margin-right:8px}.column-header .column-sort-icon .column-sortable-icon{color:#d3d3d3}.column-header .column-resize-handle{position:absolute;top:0;right:0;margin:0;padding:0;width:8px;height:100%;cursor:col-resize}.data-table-box{position:relative}.busy{position:absolute;z-index:1;top:0;bottom:0;left:0;right:0;background-color:rgba(0,0,0,.25)}.busy>i{position:absolute;left:50%;top:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}`]\r\n})\r\nexport class DataTableComponent implements DataTableParams, OnInit, AfterContentInit, OnDestroy {\r\n\r\n  private _items: any[] = [];\r\n  private _itemCount;\r\n\r\n  @Input()\r\n  get items(): any[] {\r\n    return this._items;\r\n  }\r\n\r\n  set items(items: any[]) {\r\n    this._items = items;\r\n    // no need to call notifier.next() because _onReloadFinished()\r\n    // will change reloaded value causing notifier.next() to be called implicitly.\r\n    this._onReloadFinished();\r\n  }\r\n\r\n\r\n  @Input()\r\n  get itemCount(): number {\r\n    return this._itemCount;\r\n  }\r\n\r\n  set itemCount(count: number) {\r\n    this._itemCount = count;\r\n    this.notifier.next();\r\n  }\r\n\r\n  // UI components:\r\n  @ContentChildren(DataTableColumnDirective) columns: QueryList<DataTableColumnDirective>;\r\n  @ViewChildren(DataTableRowComponent) rows: QueryList<DataTableRowComponent>;\r\n  @ContentChild('dataTableExpand') expandTemplate: TemplateRef<any>;\r\n\r\n  // One-time optional bindings with default values:\r\n  @Input() title = '';\r\n  @Input() showTitle = true;\r\n  @Input() header = true;\r\n  @Input() pagination = true;\r\n  @Input() indexColumn = true;\r\n  @Input() indexColumnHeader = '';\r\n  @Input() rowColors: RowCallback;\r\n  @Input() rowTooltip: RowCallback;\r\n  @Input() selectColumn = false;\r\n  @Input() multiSelect = true;\r\n  @Input() substituteRows = true;\r\n  @Input() expandableRows = false;\r\n  @Input() labels: DataTableTranslations;\r\n  @Input() selectOnRowClick = false;\r\n  @Input() autoReload = true;\r\n  @Input() showReloading = false;\r\n  @Input() noDataMessage: string;\r\n  @Input() pageLimits: number[] = [10, 25, 50, 100, 250];\r\n  @Input() primaryColumn = '';\r\n\r\n  // reload emitter\r\n  @Output() reload = new EventEmitter();\r\n\r\n  // event handlers:\r\n  @Output() rowClick = new EventEmitter();\r\n  @Output() rowDoubleClick = new EventEmitter();\r\n  @Output() headerClick = new EventEmitter();\r\n  @Output() cellClick = new EventEmitter();\r\n  // UI state without input:\r\n  indexColumnVisible: boolean;\r\n  selectColumnVisible: boolean;\r\n  expandColumnVisible: boolean;\r\n\r\n  // ada notifications.\r\n  reloadNotification: string;\r\n  paginationNotification: string;\r\n  sortNotification: string;\r\n  columnSelectorNotification: string;\r\n\r\n  _displayParams = <DataTableParams>{}; // params of the last finished reload\r\n\r\n  subject = new Subject<void>();\r\n  subject$: Subscription;\r\n\r\n  notifier = new Subject<void>();\r\n  notifier$: Subscription;\r\n\r\n  // selection:\r\n  selectedRow: DataTableRowComponent;\r\n  selectedRows: DataTableRowComponent[] = [];\r\n\r\n  Math: any;\r\n  id = `datatable-${nextId++}`;\r\n\r\n  // select all checkbox flag\r\n  private _selectAllCheckbox = false;\r\n\r\n  // column resizing:\r\n  private _resizeInProgress = false;\r\n\r\n  resizeLimit = 30;\r\n\r\n  // Reloading:\r\n  _reloading = false;\r\n\r\n  get reloading() {\r\n    return this._reloading;\r\n  }\r\n\r\n  set reloading(val: boolean) {\r\n    this._reloading = val;\r\n    this.notifier.next();\r\n  }\r\n\r\n  // UI state: visible get/set for the outside with @Input for one-time initial values\r\n  private _sortBy: string;\r\n\r\n  @Input()\r\n  get sortBy(): string {\r\n    return this._sortBy;\r\n  }\r\n\r\n  set sortBy(value: string) {\r\n    this._sortBy = value;\r\n    this.subject.next();\r\n  }\r\n\r\n  private _sortAsc = true;\r\n\r\n  @Input()\r\n  get sortAsc(): boolean {\r\n    return this._sortAsc;\r\n  }\r\n\r\n  set sortAsc(value: boolean) {\r\n    this._sortAsc = value;\r\n    this.subject.next();\r\n  }\r\n\r\n  private _offset = 0;\r\n\r\n  @Input()\r\n  get offset(): number {\r\n    return this._offset;\r\n  }\r\n\r\n  set offset(value: number) {\r\n    this._offset = value;\r\n    this.subject.next();\r\n  }\r\n\r\n  private _limit = 10;\r\n\r\n  @Input()\r\n  get limit(): number {\r\n    return this._limit;\r\n  }\r\n\r\n  set limit(value: number) {\r\n    this._limit = value;\r\n    this.subject.next();\r\n  }\r\n\r\n  // calculated property:\r\n  @Input()\r\n  get page() {\r\n    return this.itemCount !== 0 ? Math.floor(this.offset / this.limit) + 1 : 0;\r\n  }\r\n\r\n  set page(value) {\r\n    this.offset = (value - 1) * this.limit;\r\n  }\r\n\r\n  get lastPage() {\r\n    return Math.ceil(this.itemCount / this.limit);\r\n  }\r\n\r\n  // setting multiple observable properties simultaneously\r\n  sort(sortBy: string, asc: boolean) {\r\n    this.sortBy = sortBy;\r\n    this.sortAsc = asc;\r\n  }\r\n\r\n  // init\r\n  ngOnInit() {\r\n    this._initDefaultValues();\r\n    this._initDefaultClickEvents();\r\n    this._updateDisplayParams();\r\n\r\n    if (this.pageLimits.indexOf(this.limit) < 0) {\r\n      this.limit = this.pageLimits[0];\r\n    }\r\n\r\n    this.labels = {...defaultTranslations, ...this.labels};\r\n\r\n    if (this.autoReload) {\r\n      this.reloadItems();\r\n    }\r\n\r\n    this.notifier$ = this.notifier.subscribe(() => this._notify());\r\n    this.subject$ = this.subject.debounceTime(100).subscribe(() => this.reloadItems());\r\n\r\n  }\r\n\r\n  private _initDefaultValues() {\r\n    this.indexColumnVisible = this.indexColumn;\r\n    this.selectColumnVisible = this.selectColumn;\r\n    this.expandColumnVisible = this.expandableRows;\r\n  }\r\n\r\n  private _initDefaultClickEvents() {\r\n    this.headerClick.subscribe(\r\n      (tableEvent: { column: DataTableColumnDirective, event: Event }) => this.sortColumn(tableEvent.column));\r\n    if (this.selectOnRowClick) {\r\n      this.rowClick.subscribe(\r\n        (tableEvent: { row: DataTableRowComponent, event: Event }) => tableEvent.row.selected = !tableEvent.row.selected);\r\n    }\r\n  }\r\n\r\n  reloadItems() {\r\n    this.reloading = true;\r\n    this.reload.emit(this._getRemoteParameters());\r\n  }\r\n\r\n  private _onReloadFinished() {\r\n    if (this.reloading) {\r\n      this._updateDisplayParams();\r\n      this._selectAllCheckbox = false;\r\n      this.reloading = false;\r\n    }\r\n  }\r\n  get displayParams() {\r\n    return this._displayParams;\r\n  }\r\n\r\n  _updateDisplayParams() {\r\n    this._displayParams = {\r\n      sortBy: this.sortBy,\r\n      sortAsc: this.sortAsc,\r\n      offset: this.offset,\r\n      limit: this.limit\r\n    };\r\n  }\r\n\r\n  constructor() { }\r\n\r\n  public rowClicked(row: DataTableRowComponent, event: Event) {\r\n    this.rowClick.emit({row, event});\r\n  }\r\n\r\n  public rowDoubleClicked(row: DataTableRowComponent, event: Event) {\r\n    this.rowDoubleClick.emit({row, event});\r\n  }\r\n\r\n  public headerClicked(column: DataTableColumnDirective, event: Event) {\r\n    if (!this._resizeInProgress) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      this.headerClick.emit({column, event});\r\n    } else {\r\n      this._resizeInProgress = false; // this is because I can't prevent click from mousup of the drag end\r\n    }\r\n  }\r\n\r\n  private cellClicked(column: DataTableColumnDirective, row: DataTableRowComponent, event: MouseEvent) {\r\n    this.cellClick.emit({row, column, event});\r\n  }\r\n\r\n  // functions:\r\n  private _getRemoteParameters(): DataTableParams {\r\n    const params = <DataTableParams>{};\r\n\r\n    if (this.sortBy) {\r\n      params.sortBy = this.sortBy;\r\n      params.sortAsc = this.sortAsc;\r\n    }\r\n    if (this.pagination) {\r\n      params.offset = this.offset;\r\n      params.limit = this.limit;\r\n    }\r\n    return params;\r\n  }\r\n\r\n  private sortColumn(column: DataTableColumnDirective) {\r\n    if (column.sortable) {\r\n      const ascending = this.sortBy === column.property ? !this.sortAsc : true;\r\n      this.sort(column.property, ascending);\r\n    }\r\n  }\r\n\r\n  get columnCount() {\r\n    let count = 0;\r\n    count += this.indexColumnVisible ? 1 : 0;\r\n    count += this.selectColumnVisible ? 1 : 0;\r\n    count += this.expandColumnVisible ? 1 : 0;\r\n    this.columns.toArray().forEach(column => {\r\n      count += column.visible ? 1 : 0;\r\n    });\r\n    return count;\r\n  }\r\n\r\n  public getRowColor(item: any, index: number, row: DataTableRowComponent) {\r\n    if (this.rowColors !== undefined) {\r\n      return (<RowCallback>this.rowColors)(item, row, index);\r\n    }\r\n  }\r\n\r\n  get selectAllCheckbox() {\r\n    return this._selectAllCheckbox;\r\n  }\r\n\r\n  set selectAllCheckbox(value) {\r\n    this._selectAllCheckbox = value;\r\n    this._onSelectAllChanged(value);\r\n  }\r\n\r\n  private _onSelectAllChanged(value: boolean) {\r\n    this.rows.toArray().forEach(row => row.selected = value);\r\n  }\r\n\r\n  onRowSelectChanged(row: DataTableRowComponent) {\r\n\r\n    // maintain the selectedRow(s) view\r\n    if (this.multiSelect) {\r\n      const index = this.selectedRows.indexOf(row);\r\n      if (row.selected && index < 0) {\r\n        this.selectedRows.push(row);\r\n      } else if (!row.selected && index >= 0) {\r\n        this.selectedRows.splice(index, 1);\r\n      }\r\n    } else {\r\n      if (row.selected) {\r\n        this.selectedRow = row;\r\n      } else if (this.selectedRow === row) {\r\n        delete this.selectedRow;\r\n      }\r\n    }\r\n\r\n    // unselect all other rows:\r\n    if (row.selected && !this.multiSelect) {\r\n      this.rows.toArray().filter(row_ => row_.selected).forEach(row_ => {\r\n        if (row_ !== row) { // avoid endless loop\r\n          row_.selected = false;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // other:\r\n\r\n  get substituteItems() {\r\n    return Array.from({length: this.displayParams.limit - this.items.length});\r\n  }\r\n\r\n  private resizeColumnStart(event: MouseEvent, column: DataTableColumnDirective, columnElement: HTMLElement) {\r\n    this._resizeInProgress = true;\r\n    let startOffset = columnElement.offsetWidth - event.pageX;\r\n    drag(event, {\r\n      move: (moveEvent: MouseEvent, dx: number) => {\r\n        if (this._isResizeInLimit(columnElement, dx)) {\r\n          column.width = startOffset + moveEvent.pageX + dx;\r\n        }\r\n      },\r\n    });\r\n  }\r\n\r\n  private _isResizeInLimit(columnElement: HTMLElement, dx: number) {\r\n    /* This is needed because CSS min-width didn't work on table-layout: fixed.\r\n         Without the limits, resizing can make the next column disappear completely,\r\n         and even increase the table width. The current implementation suffers from the fact,\r\n         that offsetWidth sometimes contains out-of-date values. */\r\n    if ((dx < 0 && (columnElement.offsetWidth + dx) <= this.resizeLimit) ||\r\n      !columnElement.nextElementSibling || // resizing doesn't make sense for the last visible column\r\n      (dx >= 0 && ((<HTMLElement> columnElement.nextElementSibling).offsetWidth + dx) <= this.resizeLimit)) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  ngAfterContentInit(): void {\r\n    if (this.primaryColumn === '') {\r\n      this.primaryColumn = (this.columns.first as DataTableColumnDirective).property;\r\n    }\r\n  }\r\n\r\n  _notify(): void {\r\n    const loading = this.reloading;\r\n\r\n    this.reloadNotification = loading ?\r\n      this.labels.loadingText.replace('{title}', this.title) :\r\n      this.labels.loadedText.replace('{title}', this.title);\r\n\r\n    if (!loading) {\r\n      if (this.pagination) {\r\n        this.paginationNotification = this.labels.paginationText\r\n          .replace('{from}', '' + (Math.ceil(this.itemCount / this.limit) !== 0 ? this.offset + 1 : '0'))\r\n          .replace('{to}', '' + (Math.min(this.offset + this.limit, this.itemCount)))\r\n          .replace('{total}', '' + this.itemCount);\r\n      } else {\r\n        this.paginationNotification = '';\r\n      }\r\n      if (this.columns !== undefined && this.sortBy !== undefined) {\r\n        const col = this.columns.toArray().find(column => column.property === this.sortBy) as DataTableColumnDirective;\r\n        this.sortNotification = (this.sortAsc ? this.labels.sortedAscending : this.labels.sortedDescending)\r\n          .replace('{title}', this.title)\r\n          .replace('{header}', col.header);\r\n      } else {\r\n        this.sortNotification = '';\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subject$.unsubscribe();\r\n    this.notifier$.unsubscribe();\r\n  }\r\n}\r\n",
    "export type MoveHandler = (event: MouseEvent, dx: number, dy: number, x: number, y: number) => void;\r\nexport type UpHandler = (event: MouseEvent, x: number, y: number, moved: boolean) => void;\r\n\r\n/*tslint:disable-next-line*/\r\nexport function drag(event: MouseEvent, {move: move, up: up}: { move: MoveHandler, up?: UpHandler }) {\r\n\r\n  const startX = event.pageX;\r\n  const startY = event.pageY;\r\n  let x = startX;\r\n  let y = startY;\r\n  let moved = false;\r\n\r\n  function mouseMoveHandler(evt: MouseEvent) {\r\n    const dx = evt.pageX - x;\r\n    const dy = evt.pageY - y;\r\n    x = evt.pageX;\r\n    y = evt.pageY;\r\n    if (dx || dy) {\r\n      moved = true;\r\n    }\r\n\r\n    move(evt, dx, dy, x, y);\r\n\r\n    event.preventDefault(); // to avoid text selection\r\n  }\r\n\r\n  function mouseUpHandler(evt: MouseEvent) {\r\n    x = evt.pageX;\r\n    y = evt.pageY;\r\n\r\n    document.removeEventListener('mousemove', mouseMoveHandler);\r\n    document.removeEventListener('mouseup', mouseUpHandler);\r\n\r\n    if (up) {\r\n      up(event, x, y, moved);\r\n    }\r\n  }\r\n\r\n  document.addEventListener('mousemove', mouseMoveHandler);\r\n  document.addEventListener('mouseup', mouseUpHandler);\r\n}\r\n",
    "import {\r\n  Component,\r\n  ElementRef,\r\n  forwardRef,\r\n  HostListener,\r\n  Inject\r\n} from '@angular/core';\r\nimport { DataTableComponent } from '../table/table.component';\r\n\r\n@Component({\r\n  selector: 'data-table-header',\r\n  template: `<div class=\"data-table-header\">\r\n  <p class=\"h4 title\" *ngIf=\"dataTable.showTitle\" [textContent]=\"dataTable.title\"></p>\r\n  <div class=\"button-panel\">\r\n    <button type=\"button\" class=\"btn btn-default btn-sm refresh-button\"\r\n            (click)=\"dataTable.reloadItems()\"\r\n            [title]=\"dataTable.labels.headerReload.replace('{title}', dataTable.title)\">\r\n      <i class=\"fa fa-refresh\" aria-hidden=\"true\"></i>\r\n    </button>\r\n    <button type=\"button\" class=\"btn btn-default btn-sm column-selector-button\" [class.active]=\"columnSelectorOpen\"\r\n            [attr.aria-haspopup]=\"true\"\r\n            [attr.aria-expanded]=\"columnSelectorOpen\"\r\n            (click)=\"columnSelectorOpen = !columnSelectorOpen;\"\r\n            [title]=\"dataTable.labels.headerColumnSelector.replace('{title}', dataTable.title)\">\r\n      <i class=\"fa fa-list\" aria-hidden=\"true\"></i>\r\n    </button>\r\n    <div class=\"column-selector-wrapper\">\r\n      <div *ngIf=\"columnSelectorOpen\" class=\"column-selector-box panel panel-default\">\r\n        <ul class=\"list-group list-group-flush\">\r\n          <li *ngIf=\"dataTable.expandableRows\" class=\"list-group-item column-selector-column checkbox\">\r\n            <label class=\"d-flex align-items-center\">\r\n              <input type=\"checkbox\" [(ngModel)]=\"dataTable.expandColumnVisible\" (change)=\"onChange($event)\" [attr.aria-controls]=\"dataTable.id\"/>\r\n              <span [textContent]=\"dataTable.labels.expandColumn\"></span>\r\n            </label>\r\n          </li>\r\n          <li *ngIf=\"dataTable.indexColumn\" class=\"list-group-item column-selector-column checkbox\">\r\n            <label class=\"d-flex align-items-center\">\r\n              <input type=\"checkbox\" [(ngModel)]=\"dataTable.indexColumnVisible\" (change)=\"onChange($event)\" [attr.aria-controls]=\"dataTable.id\"/>\r\n              <span [textContent]=\"dataTable.labels.indexColumn\"></span>\r\n            </label>\r\n          </li>\r\n          <li *ngIf=\"dataTable.selectColumn\" class=\"list-group-item column-selector-column checkbox\">\r\n            <label class=\"d-flex align-items-center\">\r\n              <input type=\"checkbox\" [(ngModel)]=\"dataTable.selectColumnVisible\" (change)=\"onChange($event)\" [attr.aria-controls]=\"dataTable.id\"/>\r\n              <span [textContent]=\"dataTable.labels.selectColumn\"></span>\r\n            </label>\r\n          </li>\r\n          <ng-template ngFor let-item let-i=\"index\" [ngForOf]=\"dataTable.columns\">\r\n            <li class=\"list-group-item column-selector-column checkbox\"\r\n                *ngIf=\"dataTable.primaryColumn !== item.property\">\r\n              <label class=\"d-flex align-items-center\">\r\n                <input type=\"checkbox\" [(ngModel)]=\"item.visible\" (change)=\"onChange($event)\" [attr.aria-controls]=\"dataTable.id\"/>\r\n                <span [textContent]=\"item.header\"></span>\r\n              </label>\r\n            </li>\r\n          </ng-template>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n`,\r\n  styles: [`.data-table-header{min-height:25px;margin-bottom:10px}.title{display:inline-block;margin:5px 0 0 5px}.button-panel{float:right}.button-panel button{outline:0!important}.column-selector-wrapper{position:relative}.column-selector-box{-webkit-box-shadow:0 0 10px #d3d3d3;box-shadow:0 0 10px #d3d3d3;background:#fff;width:150px;padding:10px;position:absolute;right:0;top:1px;z-index:1060}.column-selector-box .list-group-item.column-selector-column{padding:.5rem .25rem}.column-selector-box .list-group-item.column-selector-column label{margin-bottom:0}.column-selector-box .list-group-item.column-selector-column input{margin-right:4px;font-style:italic}`]\r\n})\r\nexport class DataTableHeaderComponent {\r\n\r\n  columnSelectorOpen = false;\r\n\r\n  constructor(@Inject(forwardRef(() => DataTableComponent)) public dataTable: DataTableComponent,\r\n              private elemRef: ElementRef) {\r\n  }\r\n\r\n  @HostListener('document:click', ['$event']) onClickHandler(event) {\r\n    if (!this.elemRef.nativeElement.contains(event.target)) {\r\n      this.columnSelectorOpen = false;\r\n    }\r\n  }\r\n\r\n  @HostListener('document:keyup', ['$event']) onKeyUpHandler(event) {\r\n    if (event.keyCode === 27 || (event.keyCode === 9 && !this.elemRef.nativeElement.contains(event.target))) {\r\n      this.columnSelectorOpen = false;\r\n    }\r\n  }\r\n\r\n  onChange(event: Event) {\r\n    const isChecked = (<HTMLInputElement> event.target).checked;\r\n    const columnName = (<HTMLInputElement> event.target).parentElement.textContent.trim();\r\n    const interpolateParams = {\r\n      'column_name': columnName,\r\n      'title': this.dataTable.title\r\n    };\r\n\r\n    this.dataTable.columnSelectorNotification = (isChecked ? this.dataTable.labels.headerColumnSelectorAdded :\r\n      this.dataTable.labels.headerColumnSelectorRemoved)\r\n      .replace('{column_name}', interpolateParams.column_name)\r\n      .replace('{title}', interpolateParams.title);\r\n  }\r\n}\r\n",
    "import {\r\n  Component,\r\n  ElementRef,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { DataTableComponent} from '../table/table.component';\r\n\r\nlet nextId = 0;\r\n\r\n@Component({\r\n  selector: 'data-table-pagination',\r\n  template: `<div class=\"d-flex justify-content-between align-items-center\">\r\n  <div class=\"pagination-range\">\r\n    <span [textContent]=\"dataTable.labels.paginationText\r\n        .replace('{from}', this.Math.ceil(dataTable.itemCount / dataTable.limit) !== 0 ? dataTable.offset + 1 + '' : '0')\r\n        .replace('{to}', this.Math.min(dataTable.offset + dataTable.limit, dataTable.itemCount) + '')\r\n        .replace('{total}', dataTable.itemCount + '')\"></span>\r\n  </div>\r\n  <div class=\"pagination-controllers pagination-box d-flex justify-content-between\">\r\n    <div class=\"pagination-limit d-flex justify-content-between\">\r\n      <div class=\"input-group\">\r\n        <div class=\"input-group-prepend\">\r\n          <label [attr.for]=\"id + '-page-limit'\" class=\"input-group-text\" [textContent]=\"dataTable.labels.paginationLimit\"></label>\r\n        </div>\r\n        <select [id]=\"id + '-page-limit'\" class=\"form-control\" [(ngModel)]=\"limit\" [disabled]=\"dataTable.itemCount === 0\">\r\n          <option *ngFor=\"let l of limits\" [value]=\"l\">{{ l }}</option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n    <div class=\"pagination-pages d-flex justify-content-between\">\r\n      <button [disabled]=\"dataTable.offset <= 0\"\r\n              (click)=\"pageFirst()\"\r\n              class=\"btn btn-default pagination-firstpage\"\r\n              [title]=\"dataTable.labels.firstPage\"\r\n              [attr.aria-controls]=\"dataTable.id\">\r\n        <i class=\"fa fa-angle-double-left\" aria-hidden=\"true\"></i>\r\n      </button>\r\n      <button [disabled]=\"dataTable.offset <= 0\"\r\n              (click)=\"pageBack()\"\r\n              class=\"btn btn-default pagination-prevpage\"\r\n              [title]=\"dataTable.labels.prevPage\"\r\n              [attr.aria-controls]=\"dataTable.id\">\r\n        <i class=\"fa fa-angle-left\" aria-hidden=\"true\"></i>\r\n      </button>\r\n      <div class=\"pagination-page\">\r\n        <div class=\"input-group\">\r\n          <div class=\"input-group-prepend\">\r\n            <label class=\"input-group-text\" [attr.for]=\"id + '-page-input'\">\r\n              {{ dataTable.labels.pageNumberLabel }}\r\n            </label>\r\n          </div>\r\n          <input #pageInput type=\"number\"\r\n                 [id]=\"id + '-page-input'\"\r\n                 class=\"form-control\" min=\"1\" step=\"1\" max=\"{{maxPage}}\"\r\n                 [disabled]=\"dataTable.itemCount === 0\"\r\n                 [ngModel]=\"page\"\r\n                 (blur)=\"validate($event)\"\r\n                 (keyup.enter)=\"validate($event)\"\r\n                 (keyup.esc)=\"pageInput.value = page\"\r\n                 [title]=\"dataTable.labels.pageNumber + ' ' +\r\n                    dataTable.labels.pageNumberNofM.replace('{N}', ''+page).replace('{M}', ''+maxPage)\"\r\n                 [attr.aria-controls]=\"dataTable.id\"/>\r\n          <div class=\"input-group-append\">\r\n            <span class=\"input-group-text\">\r\n              {{ dataTable.labels.paginationTotalPages }}&nbsp;{{ dataTable.lastPage }}\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button [disabled]=\"(dataTable.offset + dataTable.limit) >= dataTable.itemCount\"\r\n              (click)=\"pageForward()\"\r\n              class=\"btn btn-default pagination-nextpage\"\r\n              [title]=\"dataTable.labels.nextPage\"\r\n              [attr.aria-controls]=\"dataTable.id\">\r\n        <i class=\"fa fa-angle-right\" aria-hidden=\"true\"></i>\r\n      </button>\r\n      <button [disabled]=\"(dataTable.offset + dataTable.limit) >= dataTable.itemCount\"\r\n              (click)=\"pageLast()\"\r\n              class=\"btn btn-default pagination-lastpage\"\r\n              [title]=\"dataTable.labels.lastPage\"\r\n              [attr.aria-controls]=\"dataTable.id\">\r\n        <i class=\"fa fa-angle-double-right\" aria-hidden=\"true\"></i>\r\n      </button>\r\n    </div>\r\n  </div>\r\n</div>\r\n`,\r\n  styles: [`.pagination-controllers select{min-width:5rem;text-align:right}.pagination-pages>*{margin:0 .15rem}.pagination-limit{margin-right:1.5rem}.pagination-box button{outline:0!important}`]\r\n})\r\nexport class DataTablePaginationComponent {\r\n\r\n  id = `pagination-${nextId++}`;\r\n\r\n  @ViewChild('pageInput') pageInput: ElementRef;\r\n\r\n  Math: any;\r\n\r\n  @Input() limits: number[];\r\n\r\n  constructor(@Inject(forwardRef(() => DataTableComponent)) public dataTable: DataTableComponent) {\r\n    this.Math = Math;\r\n  }\r\n\r\n  pageBack() {\r\n    this.dataTable.offset -= Math.min(this.dataTable.limit, this.dataTable.offset);\r\n    if (this.dataTable.offset <= 0) {\r\n      this.pageInput.nativeElement.focus();\r\n    }\r\n}\r\n  pageForward() {\r\n    this.dataTable.offset += this.dataTable.limit;\r\n    if ((this.dataTable.offset + this.dataTable.limit) >= this.dataTable.itemCount) {\r\n      this.pageInput.nativeElement.focus();\r\n    }\r\n  }\r\n\r\n  pageFirst() {\r\n    this.dataTable.offset = 0;\r\n    this.pageInput.nativeElement.focus();\r\n  }\r\n\r\n  pageLast() {\r\n    this.dataTable.offset = (this.maxPage - 1) * this.dataTable.limit;\r\n    if ((this.dataTable.offset + this.dataTable.limit) >= this.dataTable.itemCount) {\r\n      this.pageInput.nativeElement.focus();\r\n    }\r\n  }\r\n\r\n  get maxPage() {\r\n    return Math.ceil(this.dataTable.itemCount / this.dataTable.limit);\r\n  }\r\n\r\n  get limit() {\r\n    return this.dataTable.limit;\r\n  }\r\n\r\n  set limit(value) {\r\n    this.dataTable.limit = +value;\r\n    // returning back to the first page.\r\n    this.page = 1;\r\n  }\r\n\r\n  get page() {\r\n    return this.dataTable.page;\r\n  }\r\n\r\n  set page(value) {\r\n    this.dataTable.page = +value;\r\n  }\r\n\r\n  validate(event) {\r\n    const newValue = +event.target.value;\r\n    if (newValue !== this.page) {\r\n      this.page = (event.target.value > this.maxPage) ? this.maxPage : (newValue < 1 ) ? 1 : newValue;\r\n      event.target.value = this.page;\r\n    }\r\n  }\r\n}\r\n",
    "// modules\r\nimport { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n// utils\r\nimport { HideDirective } from './utils/hide';\r\nimport { MinPipe } from './utils/min';\r\nimport { PixelConverter } from './utils/px';\r\n// types & tools\r\nimport { DataTableTranslations } from './types/data-table-translations.type';\r\nimport { CellCallback } from './types/cell-callback.type';\r\nimport { RowCallback } from './types/row-callback.type';\r\nimport { DataTableResource } from './tools/data-table-resource';\r\nimport { DataTableParams } from './types/data-table-params.type';\r\n// components & directives\r\nimport { DataTableComponent } from './components/table/table.component';\r\nimport { DataTableRowComponent } from './components/row/row.component';\r\nimport { DataTableColumnDirective } from './directives/column/column.directive';\r\nimport { DataTableHeaderComponent } from './components/header/header.component';\r\nimport { DataTablePaginationComponent } from './components/pagination/pagination.component';\r\n\r\nexport {\r\n  DataTableComponent, DataTableColumnDirective, DataTableRowComponent, DataTablePaginationComponent, DataTableHeaderComponent,\r\n  DataTableResource,\r\n  DataTableParams, DataTableTranslations,\r\n  CellCallback, RowCallback\r\n};\r\n\r\n@NgModule({\r\n  declarations: [\r\n    DataTableComponent, DataTableColumnDirective,\r\n    DataTableRowComponent, DataTablePaginationComponent, DataTableHeaderComponent,\r\n    PixelConverter, HideDirective, MinPipe\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule\r\n  ],\r\n  exports: [DataTableComponent, DataTableColumnDirective]\r\n})\r\n\r\nexport class DataTableModule {\r\n  public static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: DataTableModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n\r\n\r\n"
  ],
  "names": [
    "isBlank",
    "obj",
    "undefined",
    "HideDirective",
    "_elementRef",
    "renderer",
    "this",
    "_prevCondition",
    "Object",
    "defineProperty",
    "prototype",
    "set",
    "newCondition",
    "initDisplayStyle",
    "setStyle",
    "nativeElement",
    "_displayStyle",
    "displayStyle",
    "style",
    "display",
    "type",
    "Directive",
    "args",
    "selector",
    "ElementRef",
    "Renderer2",
    "hide",
    "Input",
    "MinPipe",
    "transform",
    "value",
    "Math",
    "min",
    "apply",
    "Pipe",
    "name",
    "PixelConverter",
    "DataTableResource",
    "items",
    "query",
    "params",
    "filter",
    "result",
    "slice",
    "sortBy",
    "sort",
    "a",
    "b",
    "localeCompare",
    "sortAsc",
    "reverse",
    "offset",
    "limit",
    "length",
    "Promise",
    "resolve",
    "reject",
    "setTimeout",
    "count",
    "_this",
    "DataTableColumnDirective",
    "styleClassObject",
    "sortable",
    "resizable",
    "visible",
    "getCellColor",
    "row",
    "index",
    "cellColors",
    "item",
    "ngOnInit",
    "_initCellClass",
    "styleClass",
    "property",
    "test",
    "replace",
    "_a",
    "header",
    "width",
    "cellTemplate",
    "ContentChild",
    "headerTemplate",
    "DataTableRowComponent",
    "dataTable",
    "elementRef",
    "_listeners",
    "selectedChange",
    "EventEmitter",
    "get",
    "_selected",
    "selected",
    "emit",
    "pagination",
    "displayParams",
    "getTooltip",
    "rowTooltip",
    "rowClick",
    "observers",
    "push",
    "listen",
    "event",
    "rowClicked",
    "rowDoubleClick",
    "rowDoubleClicked",
    "ngOnDestroy",
    "forEach",
    "fn",
    "Component",
    "template",
    "styles",
    "DataTableComponent",
    "decorators",
    "Inject",
    "forwardRef",
    "Output",
    "defaultTranslations",
    "headerReload",
    "headerColumnSelector",
    "headerColumnSelectorAdded",
    "headerColumnSelectorRemoved",
    "indexColumn",
    "selectColumn",
    "selectRow",
    "selectAllRows",
    "expandColumn",
    "expandRow",
    "sortedAscending",
    "sortedDescending",
    "sortAscending",
    "sortDescending",
    "paginationLimit",
    "paginationText",
    "paginationTotalPages",
    "firstPage",
    "prevPage",
    "pageNumberLabel",
    "pageNumber",
    "pageNumberNofM",
    "nextPage",
    "lastPage",
    "loadingText",
    "loadedText",
    "nextId",
    "_items",
    "title",
    "showTitle",
    "indexColumnHeader",
    "multiSelect",
    "substituteRows",
    "expandableRows",
    "selectOnRowClick",
    "autoReload",
    "showReloading",
    "pageLimits",
    "primaryColumn",
    "reload",
    "headerClick",
    "cellClick",
    "_displayParams",
    "subject",
    "Subject",
    "notifier",
    "selectedRows",
    "id",
    "_selectAllCheckbox",
    "_resizeInProgress",
    "resizeLimit",
    "_reloading",
    "_sortAsc",
    "_offset",
    "_limit",
    "_onReloadFinished",
    "_itemCount",
    "next",
    "val",
    "_sortBy",
    "itemCount",
    "floor",
    "ceil",
    "asc",
    "_initDefaultValues",
    "_initDefaultClickEvents",
    "_updateDisplayParams",
    "indexOf",
    "labels",
    "assign",
    "reloadItems",
    "notifier$",
    "subscribe",
    "_notify",
    "subject$",
    "debounceTime",
    "indexColumnVisible",
    "selectColumnVisible",
    "expandColumnVisible",
    "tableEvent",
    "sortColumn",
    "column",
    "reloading",
    "_getRemoteParameters",
    "headerClicked",
    "preventDefault",
    "stopPropagation",
    "cellClicked",
    "ascending",
    "columns",
    "toArray",
    "getRowColor",
    "rowColors",
    "_onSelectAllChanged",
    "rows",
    "onRowSelectChanged",
    "splice",
    "selectedRow",
    "row_",
    "Array",
    "from",
    "resizeColumnStart",
    "columnElement",
    "startOffset",
    "offsetWidth",
    "pageX",
    "move",
    "up",
    "startX",
    "startY",
    "pageY",
    "x",
    "y",
    "moved",
    "mouseMoveHandler",
    "evt",
    "dx",
    "dy",
    "document",
    "addEventListener",
    "mouseUpHandler",
    "removeEventListener",
    "drag",
    "moveEvent",
    "_isResizeInLimit",
    "nextElementSibling",
    "ngAfterContentInit",
    "loading",
    "reloadNotification",
    "paginationNotification",
    "col",
    "find",
    "sortNotification",
    "unsubscribe",
    "ContentChildren",
    "ViewChildren",
    "expandTemplate",
    "noDataMessage",
    "page",
    "DataTableHeaderComponent",
    "elemRef",
    "columnSelectorOpen",
    "onClickHandler",
    "contains",
    "target",
    "onKeyUpHandler",
    "keyCode",
    "onChange",
    "isChecked",
    "checked",
    "interpolateParams",
    "column_name",
    "parentElement",
    "textContent",
    "trim",
    "columnSelectorNotification",
    "HostListener",
    "DataTablePaginationComponent",
    "pageBack",
    "pageInput",
    "focus",
    "pageForward",
    "pageFirst",
    "pageLast",
    "maxPage",
    "validate",
    "newValue",
    "ViewChild",
    "limits",
    "DataTableModule",
    "forRoot",
    "ngModule",
    "providers",
    "NgModule",
    "declarations",
    "imports",
    "CommonModule",
    "FormsModule",
    "exports"
  ],
  "mappings": "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"
}
